buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0"
    }
}

// Global methods
def getRepositoryUsername() {
  return System.properties.containsKey('sonatypeUsername') ? System.properties['sonatypeUsername'] : System.env.containsKey('SONATYPE_USERNAME') ? System.env['SONATYPE_USERNAME'] : ""
}

def getRepositoryPassword() {
  return System.properties.containsKey('sonatypePassword') ? System.properties['sonatypePassword'] : System.env.containsKey('SONATYPE_PASSWORD') ? System.env['SONATYPE_PASSWORD'] : ""
}

allprojects {
    apply plugin: 'java'
    group 'com.paypal'
    version '1.0.1'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'io.codearte.nexus-staging'
    nexusStaging {
        packageGroup = "com.paypal"
    }

    apply plugin: 'maven'

    apply plugin: 'signing'
    signing {
        required { gradle.taskGraph.hasTask(tasks.uploadArchives) }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    developers {
                        developer {
                            id 'devs'
                            name 'PayPal'
                        }
                    }

                  scm {
                    url 'https://github.com/paypal/paypalhttp_java.git'
                    connection 'scm:git:git://github.com/paypal/paypalhttp_java.git'
                  }

                    licenses {
                        license {
                            name 'MIT'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}
project(':paypalhttp') {
    dependencies {
        testCompile project(':paypalhttp-testutils')
    }

    test {
        useTestNG {
            testLogging.showStandardStreams = true
            outputs.upToDateWhen { false }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.java.srcDirs
    }

    task javadocsJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocsJar
        archives sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.project {
                    name 'paypalhttp'
                    artifactId 'paypalhttp'
                    version = "${version}"
                    groupId = 'com.paypal'
                    packaging 'jar'
                    description 'This is Paypal\'s generic http library for generated SDKs'
                    url 'https://github.com/paypal/paypalhttp_java.git'
                }
            }
        }
    }
}

project(':paypalhttp-testutils') {
    dependencies {
        compile group: 'org.testng', name: 'testng', version: '6.9.13.6'
        compile 'com.github.tomakehurst:wiremock:2.4.1'
        compile "org.mockito:mockito-core:[2,3)"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.java.srcDirs
    }

    task javadocsJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocsJar
        archives sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.project {
                    name 'paypalhttp-testutils'
                    artifactId 'paypalhttp-testutils'
                    version = "${version}"
                    groupId = 'com.paypal'
                    packaging 'jar'
                    description 'Test utilities for testing PayPalHttp and derived libraries'
                    url 'https://github.com/paypal/paypalhttp_java.git'
                }
            }
        }
    }
}
